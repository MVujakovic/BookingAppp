uputstvo: 

u package manager konzoli radimo enable-migrations, to ide samo jednom za projekat
onda pravimo inicijalnu migraciju add-migration Initial
ako nesto zeznemo u nekoj migraciji, ni slucajno ne brisemo migraciju, nego pravimo novu
koja ponistava efekte prethodne
potom idemo update-database

konstruktor da bude public u klasama modela
postman - ne moras da imas frontend da bi imali backend

git:
	git clone reponame
	git config user.email "miljana_lo@hotmail.com"
	git config user.name "MVujakovic"
	git add .
	git commit -m "Message"
	git push
	
	// ako hocemo da stavimo na 'stack' nase promene na radnoj verziji, da bi mogli da uradimo pull
	git stash filename
	git stash pop


-- ako imamo niz nekih migracija...verzionisanje baze ide kroz njih
	1. drop baze pa update database -> gubimo podatke..ako nam ne prolaze neke migracije, 
	   ucinicemo da sema izgleda kako treba sema, ali gubimo podatke, ovo ne treba raditi
	2. drugo resenje je da force-ujemo tu neku migraciju...
	3. i imamo update database target migration pa ime migracije koju hocemo. korisnooo za vracanje baze u stanje Initial
	   Update-database -TargetMigration:name

web api je da se radi sa setom, i tad je bitno da se kontroler nasledjuje iz apicontrolera
imamo i klasu controler, koja se koristi u MVVC-u (pandan jsp i ostalomm), to nije rest
ne treba da pogresimo i slucajno nasledimo kontroler iz 'controler' klase ! ne javlja gresku a problem je

istraziti ono attached-ne attached objekti..bla bla, nesto za nove objkete, auto generated id

ne radimo sa sesijama - zato sto mozda imamo dva servera, ako padne jedan server gubimo (klijentske) podatke.. znaci u ovom
pristupu mi sve radimo sa bazom, cuvamo u bazi....


// ono entry.modified radimo kad spajamo sa cashom, ono attachovanje. to je bitno za modifikovanje put, i tad nam treba id
za post nam ne treba jer ne pristupamo kesu

one sign arhitektura, kao za google. jednom se logujes samo i mozes svuda...koristimo jwt standard

/oauth/token gadjamo da dobijemo token
a u body dajemo username, password i grant_type


select UserId as 'AspNetUserRoles.UserId',RoleId as'AspNetUserRoles.RoleId',AspNetRoles.Name as 'AspNetRoles.roleName', appUserId as 'AspNetUsers.appUserId', UserName
from AspNetUserRoles, AspNetRoles, AspNetUsers where AspNetRoles.Id = AspNetUserRoles.RoleId and AspNetUsers.Id=AspNetUserRoles.UserId

